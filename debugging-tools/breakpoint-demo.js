// Demonstra√ß√£o de uso de breakpoints para debugging
const fs = require("fs")

function demonstrarBreakpoints() {
  console.log("=== DEMONSTRA√á√ÉO DE BREAKPOINTS ===")

  // BREAKPOINT 1: In√≠cio da fun√ß√£o
  debugger // Pausa aqui - inspecionar vari√°veis iniciais

  let dados = null
  let usuarios = null

  try {
    // BREAKPOINT 2: Antes de ler arquivo
    debugger // Pausa aqui - verificar se arquivo existe

    if (fs.existsSync("usuarios.json")) {
      dados = fs.readFileSync("usuarios.json", "utf8")
      console.log("üìÑ Dados lidos:", dados)

      // BREAKPOINT 3: Ap√≥s ler arquivo
      debugger // Pausa aqui - inspecionar conte√∫do de 'dados'

      usuarios = JSON.parse(dados)
      console.log("üë• Usu√°rios parseados:", usuarios)

      // BREAKPOINT 4: Ap√≥s parse JSON
      debugger // Pausa aqui - inspecionar array 'usuarios'

      const maioresDeIdade = usuarios.filter((u) => {
        // BREAKPOINT 5: Dentro do filter
        debugger // Pausa aqui - inspecionar cada usu√°rio
        console.log(`Verificando: ${u.nome} (${u.idade})`)
        return u.idade > 18
      })

      // BREAKPOINT 6: Resultado final
      debugger // Pausa aqui - inspecionar resultado final

      console.log("‚úÖ Resultado:", maioresDeIdade)
    } else {
      console.error("‚ùå Arquivo n√£o encontrado")
    }
  } catch (error) {
    // BREAKPOINT 7: Captura de erro
    debugger // Pausa aqui - inspecionar erro
    console.error("‚ùå Erro capturado:", error.message)
  }
}

// Para executar com debugging:
// node --inspect-brk breakpoint-demo.js
// Depois abrir Chrome DevTools em chrome://inspect

demonstrarBreakpoints()
