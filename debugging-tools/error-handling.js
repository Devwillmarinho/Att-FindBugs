// Demonstra√ß√£o de tratamento de erros e debugging
console.log("=== TRATAMENTO DE ERROS E DEBUGGING ===\n")

// 1. Try/Catch b√°sico
function exemploTryCatch() {
  console.log("1Ô∏è‚É£ Exemplo Try/Catch:")

  try {
    // Simular erro de JSON inv√°lido
    const jsonInvalido = '{ nome: "Ana", idade: 22 }' // sem aspas na propriedade
    const objeto = JSON.parse(jsonInvalido)
    console.log("‚úÖ JSON parseado:", objeto)
  } catch (error) {
    console.error("‚ùå Erro capturado:", error.message)
    console.log("üí° Tipo do erro:", error.name)
    console.log("üìç Stack trace:", error.stack)
  }
}

// 2. Valida√ß√£o de tipos
function validarDados(usuario) {
  console.log("\n2Ô∏è‚É£ Valida√ß√£o de Dados:")

  const erros = []

  if (!usuario) {
    erros.push("Usu√°rio n√£o pode ser null/undefined")
  }

  if (typeof usuario?.nome !== "string") {
    erros.push("Nome deve ser uma string")
  }

  if (typeof usuario?.idade !== "number") {
    erros.push("Idade deve ser um n√∫mero")
  }

  if (usuario?.idade < 0) {
    erros.push("Idade n√£o pode ser negativa")
  }

  if (erros.length > 0) {
    console.error("‚ùå Erros de valida√ß√£o:")
    erros.forEach((erro) => console.error(`  - ${erro}`))
    return false
  }

  console.log("‚úÖ Dados v√°lidos:", usuario)
  return true
}

// 3. Debugging de fun√ß√µes ass√≠ncronas
async function exemploAssincrono() {
  console.log("\n3Ô∏è‚É£ Debugging Ass√≠ncrono:")

  try {
    console.log("üîÑ Iniciando opera√ß√£o ass√≠ncrona...")

    // Simular opera√ß√£o ass√≠ncrona
    const resultado = await new Promise((resolve, reject) => {
      setTimeout(() => {
        const sucesso = Math.random() > 0.5
        if (sucesso) {
          resolve({ dados: "Opera√ß√£o conclu√≠da" })
        } else {
          reject(new Error("Falha na opera√ß√£o ass√≠ncrona"))
        }
      }, 1000)
    })

    console.log("‚úÖ Sucesso:", resultado)
  } catch (error) {
    console.error("‚ùå Erro ass√≠ncrono:", error.message)
    console.log("üîß Debugging: Verificar conex√£o/timeout")
  }
}

// 4. Custom Error Classes
class UsuarioError extends Error {
  constructor(message, codigo) {
    super(message)
    this.name = "UsuarioError"
    this.codigo = codigo
  }
}

function exemploCustomError() {
  console.log("\n4Ô∏è‚É£ Custom Errors:")

  try {
    throw new UsuarioError("Usu√°rio n√£o encontrado", "USER_NOT_FOUND")
  } catch (error) {
    if (error instanceof UsuarioError) {
      console.error("‚ùå Erro customizado:", error.message)
      console.log("üè∑Ô∏è C√≥digo:", error.codigo)
    } else {
      console.error("‚ùå Erro gen√©rico:", error.message)
    }
  }
}

// Executar exemplos
exemploTryCatch()

validarDados({ nome: "Ana", idade: 22 }) // V√°lido
validarDados({ nome: 123, idade: -5 }) // Inv√°lido

exemploAssincrono()
exemploCustomError()
